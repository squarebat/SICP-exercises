#lang sicp
//returns element at index-th position in row-th row of pascal's triangle
//if index is invalid returns -1
//row and index are 1-indexed
(define (pascals-triangle row index)
  (cond ((> index row) -1)
        ((or (= index 1) (= index row)) 1)
        ((+ (pascals-triangle (- index 1) (- row 1)) (pascals-triangle index (- row 1))))
  )
)    

(pascals-triangle 5 3)
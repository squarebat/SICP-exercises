#lang sicp
(define (odd? x)
  (= (remainder x 2) 1)
)
(define (double x) (* x 2))
(define (fast-mul x y)
  (define (fast-mul-iter res x y)
    (cond ((= y 0) res)
          ((odd? y) (fast-mul-iter (+ res x) x (- y 1)))
          (else (fast-mul-iter res (double x) (/ y 2)))
    )
  )
  (fast-mul-iter 0 x y)
)
;test
(fast-mul 2 11)
(fast-mul 10 3)
(fast-mul 10 10)
(fast-mul 10 12)
(fast-mul 10 13)
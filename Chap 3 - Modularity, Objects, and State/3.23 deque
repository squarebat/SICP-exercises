#lang sicp

(define (make-deque)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (set-front-ptr! item) (set! front-ptr item))
    (define (set-rear-ptr! item) (set! rear-ptr item))
    (define (empty-deque?) (null? front-ptr))

    (define (front-deque)
      (if (empty-deque?)
          (error "FRONT called with an empty deque" front-ptr)
          (car (front-ptr))))

    (define (rear-deque)
      (if (empty-deque?)
          (error "REAR called with an empty deque" front-ptr)
          rear-ptr))

    (define (front-insert-deque! item)
      (let ((new-pair (cons item '(() ()))))
        (cond ((empty-deque?)
               (set-front-ptr! new-pair)
               (set-rear-ptr! new-pair)
               front-ptr)
              (else
               (set-cdr! (cdr new-pair) front-ptr)
               (set-car! (cdr front-ptr) new-pair)
               (set-front-ptr! new-pair)
               front-ptr))))
    
    (define (rear-insert-deque! item)
      (let ((new-pair (cons item '(() ()))))
        (cond ((empty-deque?)
               (set-front-ptr! new-pair)
               (set-rear-ptr! new-pair)
               front-ptr)
              (else
               (set-cdr! (cadr new-pair) rear-ptr)
               (set-cdr! (cdr rear-ptr) new-pair)
               (set-rear-ptr! new-pair)
               front-ptr))))

    (define (front-delete-deque!)
      (cond ((empty-deque?)
             (error "DELETE! called with an empty deque" front-ptr))
            (else
             (set-car! (cadr front-ptr) '())
             (set-front-ptr! (caddr front-ptr))
             front-ptr)))

    (define (rear-delete-deque!)
      (cond ((empty-deque?)
             (error "DELETE! called with an empty deque" front-ptr))
            (else
             (set-cdr! (caadr rear-ptr) '())
             (set-rear-ptr! (caadr rear-ptr))
             front-ptr)))

    (define (print-deque)
      (define (for-each items proc)
        (if (not (null? items))
            ((lambda ()
               (proc (car items))
               (for-each (cdr items) proc)))))
      (newline)
      (for-each front-ptr (lambda (item)
                            (display item)
                            (display " ")))
      (newline))

    (define (dispatch m)
      (cond ((eq? m 'front-insert) front-insert-deque!)
            ((eq? m 'front-delete) front-delete-deque!)
            ((eq? m 'rear-insert) rear-insert-deque!)
            ((eq? m 'rear-delete) rear-delete-deque!)
            ((eq? m 'print) print-deque)
            (else (error "ERROR! Invalid operation called on deque!" front-ptr))))
    dispatch))

;test
(define q (make-deque))
((q 'front-insert) 1)
((q 'rear-insert) 2)
((q 'front-insert) 3)
((q 'rear-insert) 4)
((q 'rear-delete))
((q 'front-delete))
((q 'print))
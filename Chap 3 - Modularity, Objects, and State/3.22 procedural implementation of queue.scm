#lang sicp
(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (set-front-ptr! item) (set! front-ptr item))
    (define (set-rear-ptr! item) (set! rear-ptr item))
    (define (empty-queue?) (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?)
          (error "FRONT called with an empty queue" front-ptr)
          (car (front-ptr))))

    (define (insert-queue! item)
      (let ((new-pair (cons item '())))
        (cond ((empty-queue?)
               (set-front-ptr! new-pair)
               (set-rear-ptr! new-pair)
               front-ptr)
              (else
               (set-cdr! rear-ptr new-pair)
               (set-rear-ptr! new-pair)
               front-ptr))))

    (define (delete-queue!)
      (cond ((empty-queue?)
             (error "DELETE! called with an empty queue" front-ptr))
            (else
             (set-front-ptr! (cdr front-ptr))
             front-ptr)))

    (define (print-queue)
      (define (for-each items proc)
        (if (not (null? items))
            ((lambda ()
               (proc (car items))
               (for-each (cdr items) proc)))))
      (newline)
      (for-each front-ptr (lambda (item)
                            (display item)
                            (display " ")))
      (newline))

    (define (dispatch m)
      (cond ((eq? m 'insert) insert-queue!)
            ((eq? m 'delete) delete-queue!)
            ((eq? m 'print) print-queue)
            (else (error "ERROR! Invalid operation called on queue!" front-ptr))))
    dispatch))

;test
(define q (make-queue))
((q 'insert) 1)
((q 'insert) 2)
((q 'insert) 3)
((q 'insert) 4)
((q 'delete))
((q 'print))